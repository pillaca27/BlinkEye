package com.royal.servicio;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.royal.dao.ParametrosmastDaoImpl;
import com.royal.dominio.Parametrosmast;
import com.royal.dominio.ParametrosmastPk;
import com.royal.dominio.dto.DtoParametros;
import com.royal.genericos.GenericoServicioValidar;
import com.royal.util.ConstantePantallaAccion;
import com.royal.util.DominioMensajeUsuario;
import com.royal.util.DominioTransaccion;
import com.royal.util.SeguridadUsuarioActual;

@Service(value = "BeanValidarParametrosmast")
public class ParametrosmastValidarImpl extends GenericoServicioValidar {
	
	@Autowired
	private ParametrosmastDaoImpl parametrosmastDaoImpl;
	
	
	public DtoParametros core(SeguridadUsuarioActual usuarioActual, String accion, DtoParametros dto) {
		List<DominioMensajeUsuario> lst = new ArrayList<DominioMensajeUsuario>();
		Parametrosmast tipocambiomast = dto.obtenerBean();
		
		if (accion.equals(ConstantePantallaAccion.INSERTAR))
			lst = coreInsertar(usuarioActual, tipocambiomast);
		if (accion.equals(ConstantePantallaAccion.ACTUALIZAR))
			//lst = coreActualizar(usuarioActual, tipocambiomast);
		if (accion.equals(ConstantePantallaAccion.ANULAR))
			//lst = coreAnular(usuarioActual, tipocambiomast);
		if (accion.equals(ConstantePantallaAccion.ELIMINAR))
			//lst = coreEliminar(usuarioActual, tipocambiomast);
		if (!lst.isEmpty()) {
			dto.setTransaccionEstado(DominioTransaccion.VALIDACION);
			dto.setTransaccionListaMensajes(lst);
		} else {
			dto.setTransaccionEstado(DominioTransaccion.OK);
			dto.setTransaccionListaMensajes(new ArrayList<DominioMensajeUsuario>());
		}
		dto.setAuxFlgValidadoBoolean(Boolean.TRUE);
		return dto;
	}
	
	public List<DominioMensajeUsuario> coreInsertar(SeguridadUsuarioActual usuarioActual,
			Parametrosmast parametrosmast) {
		parametrosmast = prepararInsertar(usuarioActual, parametrosmast);

		List<DominioMensajeUsuario> lstRes = new ArrayList<DominioMensajeUsuario>();

		Parametrosmast parametroDao = parametrosmastDaoImpl.obtenerPorId(parametrosmast.getPk());
		if (parametroDao != null) {
			lstRes.add(this.getMsjUsuarioError("Ya existe un objeto con las mismas variables"));
		}

		if (!lstRes.isEmpty())
			return lstRes;

		List<DominioMensajeUsuario> lst = coreBasico(usuarioActual, parametrosmast);
		if (!lst.isEmpty())
			return lst;

		return lst;
	}

	public Parametrosmast prepararInsertar(SeguridadUsuarioActual usuarioActual, Parametrosmast parametrosmast) {
		if (parametrosmast == null)
			return parametrosmast;
		parametrosmast = prepararBasico(usuarioActual, parametrosmast, true);

		return parametrosmast;
	}
	
	private Parametrosmast prepararBasico(SeguridadUsuarioActual usuarioActual, Parametrosmast parametrosmast,
			Boolean flgInsertar) {
		parametrosmast.setUltimousuario(usuarioActual.getUsuario());
		parametrosmast.setUltimafechamodif(new Date());

		return parametrosmast;
	}


	private List<DominioMensajeUsuario> coreBasico(SeguridadUsuarioActual usuarioActual,
			Parametrosmast parametrosmast) {

		List<DominioMensajeUsuario> lst = new ArrayList<DominioMensajeUsuario>();
		if (usuarioActual == null)
			lst.add(this.getMsjUsuarioError(SeguridadUsuarioActual.CONSTRAINTS_NOTNULL));
		if (parametrosmast == null)
			lst.add(this.getMsjUsuarioError("El objeto enviado es nulo"));
		if (!lst.isEmpty())
			return lst;
		Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
		if (parametrosmast.getPk() != null) {
			Set<ConstraintViolation<ParametrosmastPk>> reglasPk = validator.validate(parametrosmast.getPk());
			for (ConstraintViolation constraint : reglasPk) {
				lst.add(this.getMsjUsuarioError(constraint));
			}
		}
		Set<ConstraintViolation<Parametrosmast>> reglas = validator.validate(parametrosmast);
		for (ConstraintViolation constraint : reglas) {
			lst.add(this.getMsjUsuarioError(constraint));
		}
		
		return lst;

	}
}
